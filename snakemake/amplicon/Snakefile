#################### PREAMBLE
from snakemake.utils import min_version
min_version("6.0")


#################### CONFIG
configfile: "configs/snake_config_amplicon.yaml"


#################### INCLUDES

#################### PARAMS
HEAD_DIR     = config["HEAD_DIR"]
SAMPLES      = config["SAMPLES"]
SEED         = config["SEED"]


#################### RULES
rule all:
    input:
        simulated_read = expand(config["HEAD_DIR"] + "/data/simulated_hap{s}/simulated.amplicon.ngs.{r}.fastq", s=SAMPLES, r=["R1", "R2"])

rule amplicon_simulator:
    input:
        reference = config["REF"],
        primer    = config["PRIMER"]
    output:
        amplicons = config["HEAD_DIR"] + "/data/simulated_hap{sample}/amplicons.fa"
    params:
        seed  = lambda w: (SEED * int(w.sample.lstrip('0'))) % 2147483647       # that's (2^31)-1, the upper bound
    log:
        config["HEAD_DIR"] + "/logs/amplisim/amplisim.hap{sample}.log"
    shell:
        """
            amplisim \
                -s {params.seed} \
                -o {output.amplicons} \
                {input.reference} \
                {input.primer} \
                    > {log} 2>&1
        """

rule ngs_read_simulator:
    input:
        amplicons = rules.amplicon_simulator.output.amplicons
    output:
        r1        = config["HEAD_DIR"] + "/data/simulated_hap{sample}/simulated.amplicon.ngs.R1.fastq",
        r2        = config["HEAD_DIR"] + "/data/simulated_hap{sample}/simulated.amplicon.ngs.R2.fastq"
    params:
        seed  = lambda w: (SEED * int(w.sample.lstrip('0'))) % 2147483647       # that's (2^31)-1, the upper bound
    threads:
        workflow.cores
    #conda:
    #    config["HEAD_DIR"] + "/env/conda_mason.yaml"
    log:
        config["HEAD_DIR"] + "/logs/mason/mason_frag_sequencing.hap{sample}.log"
    shell:
        """
            mason_frag_sequencing \
                -i {input.amplicons} \
                -o  {output.r1} \
                -or {output.r2} \
                --seed {params.seed} \
                --illumina-read-length 150 \
                    > {log} 2>&1
        """
